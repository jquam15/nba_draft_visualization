output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#filter dataframe by closest points by position upon user clicking a point
# observeEvent(
#
# )
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
historical = read.csv("visualization_data.csv") %>%
filter(Draft.Year != 2022)
historical
percentiles %>%
filter(Position == "C")
percentiles %>%
filter(Position == "C") %>%
arrange(Weight)
percentiles %>%
filter(Position == "C") %>%
arrange(-Weight)
read.csv("visualization_data.csv") %>%
filter(Position == "C") %>%
arrange(-Weight)
read.csv("visualization_data.csv") %>%
filter(Position == "PF") %>%
arrange(-Weight)
read.csv("visualization_data.csv") %>%
filter(Position == "PF") %>%
arrange(Weight)
read.csv("visualization_data.csv") %>%
filter(Position == "PF") %>%
arrange(Wingspan)
read.csv("visualization_data.csv") %>%
filter(Position == "PF") %>%
arrange(-Wingspan)
historical = read.csv("visualization_data.csv") %>%
#filter out the current prospects for historical dataset
filter(Draft.Year != 2022) %>%
#rename the columns
rename("Draft Year" = "Draft.Year", "Draft Age" = "Draft.Age", "Standing Reach" = "Standing.Reach", "RSCI Ranking" = "RSCI.Ranking",
"TS%" = "TS.", "eFG%" = "eFG.", "ORB%" = "ORB.", "DRB%" = "DRB.", "TRB%" = "TRB.", "AST%" = "AST.", "STL%" = "STL.",
"BLK%" = "BLK.", "TOV%" = "TOV.", "USG%" = "USG.", "College OBPM" = "College.OBPM", "College DBPM" = "College.DBPM",
"College BPM" = "College.BPM")
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#filter dataframe by closest points by position upon user clicking a point
observeEvent(input$clickMap, {
xClick <- input$clickMap$x
yClick <- input$clickMap$y
}
)
print(xClick)
print(yClick)
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#filter dataframe by closest points by position upon user clicking a point
observeEvent(input$plot_click, {
xClick <- input$plot_click$x
yClick <- input$plot_click$y
}
)
print(xClick)
print(yClick)
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#filter dataframe by closest points by position upon user clicking a point
observeEvent(input$plot_click, {
xClick <- input$plot_click$x
yClick <- input$plot_click$y
}
)
print(xClick)
print(yClick)
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
View(player_stats)
player_stats[player_stats$Player == "Chet Holmgren"]
player_stats[player_stats$Player == "Chet Holmgren", ]
player_stats[player_stats$Player == "Chet Holmgren", "Position"]
View(historical)
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
dist <- reactiveVal(rep(1, nrow(historical)))
observeEvent(
input$plot_click,
dist(reset_dist(historical, input$plot_click))
)
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#render the data table with player state
# output$table = renderDataTable({
#   player_stats %>%
#     #only take specific columns
#     select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
#              "College DBPM", "College BPM"))
# })
#get the position the selected player plays
position = player_stats[player_stats$Player == input$Player, "Position"]
#render the data table with similar values to the clicked point (get historical player comps)
output$table = renderDataTable({
historical %>%
filter(Position == position) %>%
mutate(dist = dist()) %>%
arrange(dist) %>%
select(c("Player", "Positon", "Draft Year", "School"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
dist <- reactiveVal(rep(1, nrow(historical)))
observeEvent(
input$plot_click,
dist(reset_dist(historical, input$plot_click))
)
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#render the data table with player state
# output$table = renderDataTable({
#   player_stats %>%
#     #only take specific columns
#     select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
#              "College DBPM", "College BPM"))
# })
#render the data table with similar values to the clicked point (get historical player comps)
output$table = renderDataTable({
#get the position the selected player plays
position = player_stats[player_stats$Player == input$Player, "Position"]
#sort dataframe by similar historical players
historical %>%
filter(Position == position) %>%
mutate(dist = dist()) %>%
arrange(dist) %>%
select(c("Player", "Positon", "Draft Year", "School"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(percentiles$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
fluidRow(
column(7, align="right", plotOutput("percentiles", click="plot_click")),
column(5, align="left", htmlOutput("descriptive_text"), htmlOutput("descriptive_text2"), htmlOutput("web_link"), htmlOutput("github_link"))
),
div(
#want to add some space between the table and the text/plot output
style = "margin-top: 3em;",
fluidRow(
column(8, align="center", offset=2, dataTableOutput("table"))
)
)
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player %in% input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
#this provides the first paragraph of descriptive text
output$descriptive_text = renderText({
paste("", descriptive_text, sep="\t")
})
#this provides the 2nd paragraph of descriptive text with a line in between this and the 1st paragraph
output$descriptive_text2 = renderText({
paste0("<p>", "<br>", descriptive_text2, "</p>")
})
#this provides a link back to my website homepage
output$web_link = renderText({
paste0("<br>", web_link)
})
#this provides a link to the code
output$github_link = renderText({
github_link
})
}
shinyApp(ui, server)
shinyApp(ui, server)
setwd("~/projects/nba_draft_visualization")
