panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "black")
)
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
theme(
#panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "black")
)
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
theme(
#panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
panel.background = element_rect(fill = "white"),
)
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
# theme(
#   #panel.grid.major.x = element_blank(),
#   #panel.grid.minor.x = element_blank(),
#   panel.background = element_rect(fill = "white"),
# )
theme_bw()
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
# theme(
#   #panel.grid.major.x = element_blank(),
#   #panel.grid.minor.x = element_blank(),
#   panel.background = element_rect(fill = "white"),
# )
theme_bw(
axis.title = element_text(face = "bold")
)
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
# theme(
#   #panel.grid.major.x = element_blank(),
#   #panel.grid.minor.x = element_blank(),
#   panel.background = element_rect(fill = "white"),
# )
theme_bw()
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
#this is the code to make the visualization function
ggplot(test, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
theme_bw()
test
player = "Chet Holmgren"
#this is the code to filter the dataframe down to pass it to the visualization function
test = percentiles %>%
#filter by player TODO: change this to take the ui input
filter(Player == player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles")
percentile_plot = function(df) {
#this is the code to make the visualization function
ggplot(df, aes(x=Percentiles, y=Column, col=Percentiles)) +
#plot the point
geom_point(aes(size=2)) +
#don't want a y lable
labs(x="Percentile Rank", y="") +
#want the x axis scale to be from 0 to 1 (whole percentile scale)
xlim(c(0,1)) +
scale_color_gradient(low = "lightblue", high = "red") +
guides(size="none") +
theme_bw()
}
percentile_plot(test)
#get a list of unique player names
players = unique(player_stats$Player)
players
# ui <- fluidPage(
#   #titlePanel("Penguins Plot"),
#   selectInput("player", "Player", species, multiple = TRUE),
#   selectInput("island", "Island", islands, multiple = TRUE),
#   selectInput("var1", "First Variable", colnames(penguins)[3:6]),
#   selectInput("var2", "Second Variable", colnames(penguins)[3:6]),
#   plotOutput("scatterplot"),
#   plotOutput("histogram1"),
#   plotOutput("histogram2"),
# )
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = RenderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
})
output$table = renderDataTable({
percentiles %>%
#filter by player
filter(Player == input$player)
})
}
shiny(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
library(ggplot2)
library(bslib)
shiny(ui, server)
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
})
output$table = renderDataTable({
percentiles %>%
#filter by player
filter(Player == input$player)
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
})
output$table = renderDataTable({
player_stats %>%
#filter by player
filter(Player == input$player)
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot() +
title()
})
output$table = renderDataTable({
player_stats %>%
#filter by player
filter(Player == input$player)
})
}
shinyApp(ui, server)
View(player_stats)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot() +
title()
})
output$table = renderDataTable({
player_stats %>%
#filter by player
filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking"))
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot() +
title(main=paste0("Percentile Plot for ", input$player))
}, bg="transparent")
output$table = renderDataTable({
player_stats %>%
#filter by player
filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot() +
title(main=paste0("Percentile Plot for ", input$player))
}, bg="transparent")
output$table = renderDataTable({
player_stats %>%
#filter by player
filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot() +
title(main=paste0("Percentile Plot for ", input$player))
}, bg="transparent")
output$table = renderDataTable({
player_stats %>%
# #filter by player
# filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
shinyApp(ui, server)
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Penguins Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
output$table = renderDataTable({
player_stats %>%
# #filter by player
# filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
output$table = renderDataTable({
player_stats %>%
# #filter by player
# filter(Player == input$player) %>%
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
shinyApp(ui, server)
#get a list of unique player names
players = unique(player_stats$Player)
ui <- fluidPage(
#titlePanel("Player Plot"),
selectInput("player", "Player", players, multiple = F),
plotOutput("percentiles"),
dataTableOutput("table")
)
server <- function(input, output) {
#render the plot
output$percentiles = renderPlot({
percentiles %>%
#filter by player
filter(Player == input$player) %>%
#these columns aren't numeric so I don't want them for the plot
select(-c("Player", "Position", "Draft Year", "Class", "School", "RSCI Ranking")) %>%
#I want 2 columns (one with the column names and another with the corresponding percentiles) as opposed to 1 row with 19 columns
pivot_longer(everything(), names_to = "Column", values_to = "Percentiles") %>%
percentile_plot()
}, bg="transparent")
#render the data table with player state
output$table = renderDataTable({
player_stats %>%
#only take specific columns
select(c("Player", "Position", "Draft Age", "Class", "School", "Height", "Weight", "RSCI Ranking", "College OBPM",
"College DBPM", "College BPM"))
})
}
